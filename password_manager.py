from cryptography.fernet import Fernet

'''lines 4-11 have been commented since key is already generated'''
# def write_key():
#     #this key will be generated by Fernet and will be written into key.key for encryption of sorts
#     key = Fernet.generate_key()
#     #wb mode is writing file in bytes
#     with open("key.key", "wb") as key_file:
#         key_file.write(key)

# write_key()

#now we have to load the key that we generated
def load_key():
    file = open("key.key", "rb") #'rb' is read in bytes mode
    key = file.read()
    file.close()
    return key

#going to use an encryption of sorts instead of a text file, but don't store anything imp. in this
#using below pwd to 'encrypt' our passwords
#master_pwd = input("What is your master password? ")#even if wrong pwd is entered,it will go but not show anything

#function call should always be below fn definition.....usually of sorts lol
key = load_key() #need to convert master_pwd to bytes since key is in bytes as well

#fer is the final main key to completely encrypt the file
fer = Fernet(key) #initialising the encryption module and using Fernet and passing 'key'

#function creation - funcs are used to execute reusable blocks of code, if they're called repeatedly
#below is a function definition where def funcname() - syntax
def view():
    with open('passwords.txt', 'r') as f:
        #readlines reads each line of a file and returns it.
        for line in f.readlines():
            data = line.rstrip() #rstrip removes the trailing new default line
            #split will split the string based on separator mentioned
            #since we know there are 2 values, we can assign them while splitting by using a ','.
            user, passw = data.split("|")
            print("User:", user, "| Password:",
                   fer.decrypt(passw.encode()).decode())

#to create a file in case it doesn't exist & add a pwd to it.
def add():
    name = input("Account name: ")
    pwd = input("Password: ")

    #manual option is:
    #file = open('password.txt', 'a')
    #file.close()

    #'with' is used to ensure that resources(eg files) are closed immediately after processing
    #'a' - append(add something to end of an existing file or creates a new file- also the safest) is a mode like 
    #'w'- write (overwrite or write a new file)
    #'r' - read(only for reading)
    #as 'f' is the name allocated to the file for now within the code
    with open('passwords.txt', 'a') as f:
        #when you write your password, you have to convert it to it's encrypted version
        #encode will turn pwd into bytes
        # tldr: encryption + encoding happening here
        f.write(name + "|" + fer.encrypt(pwd.encode()).decode() + "\n")
        
while True: 
    mode = input("Would you like to view existing passwords or add new ones (view/add)or press q to quit? ").lower()
    if mode == "q":
        break
    if mode == "view":
        #below is a function call
        view()
        #add 'pass' as a placeholder in python for loops, functions etc so to skip the line, it does nothing.
    elif mode == "add":
        add()
    else:
        print("Invalid option")
        continue
